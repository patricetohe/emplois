"""
Script pour cr√©er des offres via l'API REST.
"""

import requests
import json

def create_jobs():
    """Cr√©e des offres via l'API REST."""
    
    jobs_data = [
        {
            "title": "D√©veloppeur Python Senior",
            "company": "TechCorp",
            "location": "Paris",
            "description": "Nous recherchons un d√©veloppeur Python senior pour rejoindre notre √©quipe. Vous travaillerez sur des projets innovants utilisant Django, PostgreSQL et des APIs REST. Exp√©rience requise en machine learning et data science.",
            "seniority": "senior",
            "is_remote": True
        },
        {
            "title": "Data Scientist",
            "company": "DataLab",
            "location": "Lyon",
            "description": "Poste de Data Scientist pour analyser de grandes quantit√©s de donn√©es et d√©velopper des mod√®les pr√©dictifs. Ma√Ætrise de Python, SQL et des outils de machine learning requise.",
            "seniority": "mid",
            "is_remote": False
        },
        {
            "title": "D√©veloppeur Full Stack",
            "company": "WebAgency",
            "location": "Marseille",
            "description": "D√©veloppeur full stack pour cr√©er des applications web modernes. Stack technique: React, Django, PostgreSQL. Exp√©rience en Docker et AWS appr√©ci√©e.",
            "seniority": "mid",
            "is_remote": True
        },
        {
            "title": "Ing√©nieur DevOps",
            "company": "CloudTech",
            "location": "Toulouse",
            "description": "Ing√©nieur DevOps pour g√©rer notre infrastructure cloud et automatiser nos d√©ploiements. Expertise en Docker, AWS et Linux requise.",
            "seniority": "senior",
            "is_remote": True
        },
        {
            "title": "D√©veloppeur Frontend",
            "company": "UIAgency",
            "location": "Nantes",
            "description": "D√©veloppeur frontend sp√©cialis√© en React pour cr√©er des interfaces utilisateur modernes et responsives. Connaissance de GraphQL et des APIs REST.",
            "seniority": "junior",
            "is_remote": False
        }
    ]
    
    base_url = "http://localhost:8000/api/job-offers/"
    created_count = 0
    
    for job_data in jobs_data:
        try:
            response = requests.post(
                base_url,
                json=job_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 201:
                created_count += 1
                job = response.json()
                print(f"‚úÖ Offre cr√©√©e: {job['title']} @ {job['company']} (ID: {job['id']})")
            else:
                print(f"‚ùå Erreur cr√©ation offre {job_data['title']}: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erreur pour {job_data['title']}: {e}")
    
    print(f"\nüéâ {created_count} nouvelles offres cr√©√©es!")
    
    # V√©rifier le total
    try:
        response = requests.get(base_url)
        if response.status_code == 200:
            jobs = response.json()
            print(f"üìä Total des offres en base: {len(jobs)}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")

if __name__ == '__main__':
    create_jobs()
