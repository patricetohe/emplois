"""
Script pour cr√©er des offres d'emploi d'exemple.
"""

import os
import sys
import django

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from api.models import JobOffer, Skill
from django.utils import timezone
from datetime import timedelta

def create_sample_jobs():
    """Cr√©e des offres d'emploi d'exemple."""
    
    # Cr√©er quelques comp√©tences si elles n'existent pas
    skills_data = [
        'Python', 'Django', 'JavaScript', 'React', 'Machine Learning',
        'Data Science', 'SQL', 'PostgreSQL', 'Docker', 'AWS',
        'Git', 'Linux', 'API', 'REST', 'GraphQL'
    ]
    
    skills = {}
    for skill_name in skills_data:
        skill, created = Skill.objects.get_or_create(name=skill_name)
        skills[skill_name] = skill
        if created:
            print(f"‚úÖ Comp√©tence cr√©√©e: {skill_name}")
    
    # Offres d'exemple
    jobs_data = [
        {
            'title': 'D√©veloppeur Python Senior',
            'company': 'TechCorp',
            'location': 'Paris',
            'description': 'Nous recherchons un d√©veloppeur Python senior pour rejoindre notre √©quipe. Vous travaillerez sur des projets innovants utilisant Django, PostgreSQL et des APIs REST. Exp√©rience requise en machine learning et data science.',
            'seniority': 'senior',
            'is_remote': True,
            'required_skills': ['Python', 'Django', 'PostgreSQL', 'Machine Learning']
        },
        {
            'title': 'Data Scientist',
            'company': 'DataLab',
            'location': 'Lyon',
            'description': 'Poste de Data Scientist pour analyser de grandes quantit√©s de donn√©es et d√©velopper des mod√®les pr√©dictifs. Ma√Ætrise de Python, SQL et des outils de machine learning requise.',
            'seniority': 'mid',
            'is_remote': False,
            'required_skills': ['Python', 'Machine Learning', 'Data Science', 'SQL']
        },
        {
            'title': 'D√©veloppeur Full Stack',
            'company': 'WebAgency',
            'location': 'Marseille',
            'description': 'D√©veloppeur full stack pour cr√©er des applications web modernes. Stack technique: React, Django, PostgreSQL. Exp√©rience en Docker et AWS appr√©ci√©e.',
            'seniority': 'mid',
            'is_remote': True,
            'required_skills': ['JavaScript', 'React', 'Python', 'Django', 'Docker']
        },
        {
            'title': 'Ing√©nieur DevOps',
            'company': 'CloudTech',
            'location': 'Toulouse',
            'description': 'Ing√©nieur DevOps pour g√©rer notre infrastructure cloud et automatiser nos d√©ploiements. Expertise en Docker, AWS et Linux requise.',
            'seniority': 'senior',
            'is_remote': True,
            'required_skills': ['Docker', 'AWS', 'Linux', 'Git']
        },
        {
            'title': 'D√©veloppeur Frontend',
            'company': 'UIAgency',
            'location': 'Nantes',
            'description': 'D√©veloppeur frontend sp√©cialis√© en React pour cr√©er des interfaces utilisateur modernes et responsives. Connaissance de GraphQL et des APIs REST.',
            'seniority': 'junior',
            'is_remote': False,
            'required_skills': ['JavaScript', 'React', 'API', 'REST', 'GraphQL']
        }
    ]
    
    created_count = 0
    for job_data in jobs_data:
        # Extraire les comp√©tences
        required_skills = job_data.pop('required_skills')
        
        # Cr√©er l'offre
        job, created = JobOffer.objects.get_or_create(
            title=job_data['title'],
            company=job_data['company'],
            defaults={
                **job_data,
                'posted_at': timezone.now(),
                'expires_at': timezone.now() + timedelta(days=30)
            }
        )
        
        if created:
            # Ajouter les comp√©tences
            for skill_name in required_skills:
                if skill_name in skills:
                    job.required_skills.add(skills[skill_name])
            
            created_count += 1
            print(f"‚úÖ Offre cr√©√©e: {job.title} @ {job.company}")
        else:
            print(f"‚ö†Ô∏è Offre existante: {job.title} @ {job.company}")
    
    print(f"\nüéâ {created_count} nouvelles offres cr√©√©es!")
    print(f"üìä Total des offres en base: {JobOffer.objects.count()}")

if __name__ == '__main__':
    create_sample_jobs()

